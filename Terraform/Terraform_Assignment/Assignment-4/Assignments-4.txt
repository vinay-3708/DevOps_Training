Create Ghost module
Create a directory called ghost.
Your modules will be made up of three files: main.tf, variables.tf and outputs.tf.

main.tf
In main.tf you will deploy out two resources docker_image and docker_container. The docker_image resource name will be ghost_image.
The name will use th image_name variable.
The docker_container resource name will be ghost_container.
The name will be set using a varialbe called container_name. The image will be set usingdocker_image.ghost_image.latest. Set the external port to use the ext_port variable.

variables.tf
In variables.tf create three varialbes: image_name, container_name and ext_port.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Create root module
main.tf
In cloud_user directory create main.tf, variables.tf and outputs.tf. In main.tf will use the ghost module.
Set image_name using a variable called image_name.
Set container_name using a variable called container_name.
Set ext_port using a variable called ext_port.
In variables.tf create three image_name, container_name and ext_port.

variables.tf
The image_name will have a default value of ghost:latest with a description of Image for container.
The container_name will have a default value of blogwith a description ofName of the container.  
Theext_portwill have adefaultvalue of 80 with a description of External port for container.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Deploy the infrastructure
Initialize Terraform.
Generate a Terraform plan and output a plan file.
Deploy the infrastructure using the plan file.







*************************************OUTPUT**********************************************************
GHOST_FOLDER:



C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-4\Ghost>terraform init

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "2.15.0"...
- Installing kreuzwerker/docker v2.15.0...
- Installed kreuzwerker/docker v2.15.0 (self-signed, key ID BD080C4571C6104C)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-4\Ghost>terraform plan -out Ghost.tfplan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.ghost_container will be created
  + resource "docker_container" "ghost_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "ghost_blog"
      + network_data     = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + ports {
          + external = 80
          + internal = 2368
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.ghost_image will be created
  + resource "docker_image" "ghost_image" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "ghost:latest"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + container_name = "ghost_blog"
  + ip             = (known after apply)

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Saved the plan to: Ghost.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "Ghost.tfplan"

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-4\Ghost>terraform apply "Ghost.tfplan"
docker_image.ghost_image: Creating...
docker_image.ghost_image: Creation complete after 2s [id=sha256:b05a58075ef6ad79016adb818a0a0b65097dfc58781e6eb6ab272fd32d976db9ghost:latest]
docker_container.ghost_container: Creating...
docker_container.ghost_container: Creation complete after 5s [id=c142f7ec640691ab72da07437ef498a73d140b86825b6f607c4e28c4c4a8204e]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

container_name = "ghost_blog"
ip = "172.17.0.2"




***************************************************************************************************************
ROOT_FOLDER:


C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-4\root>terraform init
Initializing modules...
Downloading C:/Users/nanda/Desktop/New_folder/Terraform/Terraform/Assignment-4/Ghost for ghost...
- ghost in .terraform\modules\ghost

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "2.15.0"...
- Installing kreuzwerker/docker v2.15.0...
- Installed kreuzwerker/docker v2.15.0 (self-signed, key ID BD080C4571C6104C)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-4\root>terraform plan -out root.tfplan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ghost.docker_container.ghost_container will be created
  + resource "docker_container" "ghost_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "blogwith"
      + network_data     = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + ports {
          + external = 80
          + internal = 2368
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # module.ghost.docker_image.ghost_image will be created
  + resource "docker_image" "ghost_image" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "ghost:latest"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + container_name = "blogwith"
  + ip             = (known after apply)

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Saved the plan to: root.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "root.tfplan"

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-4\root>terraform apply "root.tfplan"
module.ghost.docker_image.ghost_image: Creating...
module.ghost.docker_image.ghost_image: Creation complete after 0s [id=sha256:b05a58075ef6ad79016adb818a0a0b65097dfc58781e6eb6ab272fd32d976db9ghost:latest]
module.ghost.docker_container.ghost_container: Creating...
module.ghost.docker_container.ghost_container: Creation complete after 5s [id=a13933a7472d6fba4171e783da693424e68392906f2a6f3b099c45708d4ba6e9]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

container_name = "blogwith"
ip = "172.17.0.2"

