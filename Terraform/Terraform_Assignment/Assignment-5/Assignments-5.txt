Create the variables file (variables.tf) and add four variables with these default values:
	1. container_name: mysql.
	2. mysql_root_password: P4sSw0rd0!.
	3. mysql_network_name: mysql_internal_network.
	4. mysql_volume_name: mysql_data.

Create the images file (images.tf)
	1. Add the docker_image resource and call it mysql_image.
	2. Set the name to mysql:5.7.

Create the networks file (networks.tf):-
	1. Add the docker_network resource and call it private_bridge_network.
	2. Set the name to use the mysql_network_name variable.
	3. Set the driver to bridge.
	4. Set internal to true.

Create the volumes file (volume.tf):-
	1. In volumes.tf add the docker_volume resource and call it mysql_data_volume.
	2. Set the name to use the mysql_volume_name variable.

Create the main file (main.tf):-
	1. In main.tf add the docker_container resource and call it mysql_container.
	2. Set the name to use the container_name variable.
	3. Set the image to use the name of the image coming from docker_image.
	4. Create an environment variable for MYSQL_ROOT_PASSWORD and set it to the mysql_root_password variable.
	5. Configure the container volume to use the volume created by docker_volume, and make sure the container_path is set to /var/lib/mysql.
	7. The container needs to use the network created by docker_network.

Deploy the infrastructure
	1. Initialize Terraform.
	2. Validate the files.
	3. Generate a Terraform plan.
	4. Deploy the infrastructure using the plan file.
**********************************************************************************************

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-5>terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Using previously-installed kreuzwerker/docker v2.15.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-5>terraform plan -out plan.tfplan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:   
  + create

Terraform will perform the following actions:

  # docker_container.mysql_container will be created
  + resource "docker_container" "mysql_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = [
          + "MYSQL_ROOT_PASSWORD=P4sSw0rd0!",
        ]
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "mysql"
      + network_data     = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + networks_advanced {
          + aliases = []
          + name    = "mysql_internal_network"
        }

      + volumes {
          + container_path = "/var/lib/mysql"
          + volume_name    = "mysql_data"
        }
    }

  # docker_image.mysql_image will be created
  + resource "docker_image" "mysql_image" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "mysql:5.7"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

  # docker_network.private_bridge_network will be created
  + resource "docker_network" "private_bridge_network" {
      + driver      = "bridge"
      + id          = (known after apply)
      + internal    = true
      + ipam_driver = "default"
      + name        = "mysql_internal_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.mysql_data_volume will be created
  + resource "docker_volume" "mysql_data_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "mysql_data"
    }

Plan: 4 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Saved the plan to: plan.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "plan.tfplan"

C:\Users\nanda\Desktop\New_folder\Terraform\Terraform\Assignment-5>terraform apply "plan.tfplan"
docker_image.mysql_image: Creating...
docker_volume.mysql_data_volume: Creating...
docker_network.private_bridge_network: Creating...
docker_volume.mysql_data_volume: Creation complete after 0s [id=mysql_data]
docker_network.private_bridge_network: Creation complete after 2s [id=71db82667fdba7d9cede0f7fc7f5975f180f9b5328974dd311a4e6f0b3befece]      
docker_image.mysql_image: Still creating... [10s elapsed]
docker_image.mysql_image: Still creating... [20s elapsed]
docker_image.mysql_image: Still creating... [30s elapsed]
docker_image.mysql_image: Still creating... [40s elapsed]
docker_image.mysql_image: Still creating... [50s elapsed]
docker_image.mysql_image: Still creating... [1m0s elapsed]
docker_image.mysql_image: Still creating... [1m10s elapsed]
docker_image.mysql_image: Creation complete after 1m11s [id=sha256:6c20ffa54f8674203e91e3225e489aa505fa04b8d482954a8b6d7414842c6de4mysql:5.7]docker_container.mysql_container: Creating...
docker_container.mysql_container: Creation complete after 9s [id=a3a8e5e7a4d70fcf0ce8201e7b3379c351131e54012c9481310cbf031757edbb]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.